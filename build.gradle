buildscript {
  repositories {
    gradlePluginPortal()
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    //jhipster-needle-gradle-buildscript-dependency - JHipster will add additional gradle build script plugins here
  }
}

plugins {
  id "java"
  id "maven-publish"
  id "idea"
  id "eclipse"
  id "jacoco"
  id "org.springframework.boot"
  id "com.google.cloud.tools.jib"
  id "com.gorylenko.gradle-git-properties"
  id "org.openapi.generator"
  id "com.github.node-gradle.node"
  id "org.liquibase.gradle"
  id "org.sonarqube"
  id "io.spring.nohttp"
  //jhipster-needle-gradle-plugins - JHipster will add additional gradle plugins here
  id "org.hidetake.ssh"
//  id 'org.graalvm.buildtools.native'
}
//repositories {
//    maven { url 'https://repo.spring.io/release' }
////  maven { url 'https://repo.spring.io/milestone' }
////  gradlePluginPortal()
//}

group = "com.regitiny.catiny"
version = "0.0.1-SNAPSHOT"

description = ""

sourceCompatibility = 11
targetCompatibility = 11
assert System.properties["java.specification.version"] == "1.8" || "1.9" || "10" || "11" || "12" || "13" || "14" || "15" || "16"

apply from: "gradle/docker.gradle"
apply from: "gradle/sonar.gradle"
apply from: "gradle/swagger.gradle"
//jhipster-needle-gradle-apply-from - JHipster will add additional gradle scripts to be applied here
//apply from: "gradle/liquibase.gradle"

if (project.hasProperty("server.ssh.ip") && project.hasProperty("server.ssh.password"))
{
  apply from: "gradle/deploy_ssh.gradle"
}

if (project.hasProperty("prod") || project.hasProperty("gae"))
{
  apply from: "gradle/profile_prod.gradle"
}
else
{
  apply from: "gradle/profile_dev.gradle"
}

if (project.hasProperty("war"))
{
  apply from: "gradle/war.gradle"
}

if (project.hasProperty("gae"))
{
  apply plugin: 'maven'
  apply plugin: 'org.springframework.boot.experimental.thin-launcher'
  apply plugin: 'io.spring.dependency-management'

  dependencyManagement {
    imports {
      mavenBom "tech.jhipster:jhipster-dependencies:${jhipsterDependenciesVersion}"
    }
  }
  appengineStage.dependsOn thinResolve
}

if (project.hasProperty("zipkin"))
{
  apply from: "gradle/zipkin.gradle"
}

idea {
  module {
    excludeDirs += files("node_modules")
  }
}

eclipse {
  sourceSets {
    main {
      java {
        srcDirs += ["build/generated/sources/annotationProcessor/java/main"]
      }
    }
  }
}

defaultTasks "bootRun"

springBoot {
  mainClassName = "com.regitiny.catiny.CatinyApp"
}

test {
  useJUnitPlatform()
  exclude "**/*IT*", "**/*IntTest*"
  testLogging {
    events 'FAILED', 'SKIPPED'
  }
  jvmArgs += '-Djava.security.egd=file:/dev/./urandom -Xmx256m'
  // uncomment if the tests reports are not generated
  // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
  // ignoreFailures true
  reports.html.enabled = false
}

task integrationTest(type: Test) {
  useJUnitPlatform()
  description = "Execute integration tests."
  group = "verification"
  include "**/*IT*", "**/*IntTest*"
  exclude "**/*CucumberIT*"
  testLogging {
    events 'FAILED', 'SKIPPED'
  }
  jvmArgs += '-Djava.security.egd=file:/dev/./urandom -Xmx256m'
  if (project.hasProperty('testcontainers'))
  {
    environment 'spring.profiles.active', 'testcontainers'
  }

  // uncomment if the tests reports are not generated
  // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
  // ignoreFailures true
  reports.html.enabled = false
}

task cucumberTest(type: Test) {
  description = "Execute cucumber BDD tests."
  group = "verification"
  include "**/*CucumberIT*"

  // uncomment if the tests reports are not generated
  // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
  // ignoreFailures true
  reports.html.enabled = false
}

check.dependsOn cucumberTest

check.dependsOn integrationTest
task testReport(type: TestReport) {
  destinationDir = file("$buildDir/reports/tests")
  reportOn test
}

task integrationTestReport(type: TestReport) {
  destinationDir = file("$buildDir/reports/tests")
  reportOn integrationTest
}

task cucumberTestReport(type: TestReport) {
  destinationDir = file("$buildDir/reports/tests")
  reportOn cucumberTest
}

if (!project.hasProperty("runList")) {
  project.ext.runList = "main"
}

project.ext.diffChangelogFile = "src/main/resources/config/liquibase/changelog/" + new Date().format("yyyyMMddHHmmss") + "_changelog.xml"

liquibase {
  activities {
    main {
      driver "org.h2.Driver"
      url "jdbc:h2:file:./build/h2db/db/catiny"
      username "catiny"
      password ""
      changeLogFile "src/main/resources/config/liquibase/master.xml"
      defaultSchemaName ""
      logLevel "debug"
      classpath "src/main/resources/"
    }
    diffLog {
      driver "org.mariadb.jdbc.Driver"
      url "jdbc:mariadb://localhost:3306"
      username "root"
      password ""
      changeLogFile project.ext.diffChangelogFile
      referenceUrl "hibernate:spring:com.regitiny.catiny.domain?dialect=org.hibernate.dialect.MariaDBDialect&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy"
      defaultSchemaName "catiny"
      logLevel "debug"
      classpath "$buildDir/classes/java/main"
    }
  }

  runList = project.ext.runList
}

gitProperties {
  failOnNoGitDirectory = false
  keys = ["git.branch", "git.commit.id.abbrev", "git.commit.id.describe"]
}

checkstyle {
  toolVersion "${checkstyleVersion}"
  configFile file("checkstyle.xml")
  checkstyleTest.enabled = false
}
nohttp {
  source.include "build.gradle", "README.md"
}

configurations {
  providedRuntime
  implementation.exclude module: "spring-boot-starter-tomcat"
  all {
    resolutionStrategy {
      // Inherited version from Spring Boot can't be used because of regressions:
      // To be removed as soon as spring-boot use the same version
      force "org.liquibase:liquibase-core:${liquibaseHibernate5Version}"
    }
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  //jhipster-needle-gradle-repositories - JHipster will add additional repositories
}

dependencies {
  // import JHipster dependencies BOM
  if (!project.hasProperty("gae"))
  {
    implementation platform("tech.jhipster:jhipster-dependencies:${jhipsterDependenciesVersion}")
  }

  // Use ", version: jhipsterDependenciesVersion, changing: true" if you want
  // to use a SNAPSHOT release instead of a stable release
  implementation group: "tech.jhipster", name: "jhipster-framework"
  implementation "javax.annotation:javax.annotation-api"
  implementation "org.springframework.boot:spring-boot-starter-cache"
  implementation "io.dropwizard.metrics:metrics-core"
  implementation "io.micrometer:micrometer-registry-prometheus"
  implementation "com.fasterxml.jackson.datatype:jackson-datatype-hppc"
  implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
  implementation "com.fasterxml.jackson.module:jackson-module-jaxb-annotations"
  implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5"
  implementation "com.fasterxml.jackson.core:jackson-annotations"
  implementation "com.fasterxml.jackson.core:jackson-databind"
  implementation "org.redisson:redisson"
  implementation "org.hibernate:hibernate-jcache"
  implementation "javax.cache:cache-api"
  implementation "org.hibernate:hibernate-core"
  implementation "com.zaxxer:HikariCP"
  implementation "org.apache.commons:commons-lang3"
  implementation "org.openapitools:jackson-databind-nullable:${jacksonDatabindNullableVersion}"
  implementation "javax.transaction:javax.transaction-api"
  implementation "org.hibernate:hibernate-entitymanager"
  implementation "org.hibernate.validator:hibernate-validator"
  implementation "org.liquibase:liquibase-core"
  liquibaseRuntime "org.liquibase:liquibase-core"
  liquibaseRuntime "org.liquibase.ext:liquibase-hibernate5:${liquibaseHibernate5Version}"
  liquibaseRuntime sourceSets.main.compileClasspath
  implementation "org.springframework.boot:spring-boot-loader-tools"
  implementation "org.springframework.boot:spring-boot-starter-mail"
  implementation "org.springframework.boot:spring-boot-starter-logging"
  implementation "org.springframework.boot:spring-boot-starter-actuator"
  implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
  implementation "org.springframework.boot:spring-boot-starter-data-elasticsearch"
  testImplementation "org.testcontainers:mariadb"
  implementation "org.apache.kafka:kafka-clients"
  implementation "org.springframework.boot:spring-boot-starter-security"
  implementation("org.springframework.boot:spring-boot-starter-web") {
    exclude module: "spring-boot-starter-tomcat"
  }
  implementation "org.springframework.boot:spring-boot-starter-undertow"
  implementation "org.springframework.boot:spring-boot-starter-websocket"
  implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
  implementation "org.zalando:problem-spring-web"
  implementation "org.springframework.cloud:spring-cloud-starter-bootstrap"
  implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client"
  implementation "org.springframework.cloud:spring-cloud-starter-config"
  implementation "org.springframework.security:spring-security-config"

  implementation "org.springframework.security:spring-security-data"
  implementation "org.springframework.security:spring-security-web"
  implementation "org.springframework.security:spring-security-messaging"
  implementation "io.jsonwebtoken:jjwt-api"
  if (!project.hasProperty("gae"))
  {
    runtimeOnly "io.jsonwebtoken:jjwt-impl"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson"
  }
  else
  {
    implementation "io.jsonwebtoken:jjwt-impl"
    implementation "io.jsonwebtoken:jjwt-jackson"
  }
  implementation("io.springfox:springfox-oas")
  implementation("io.springfox:springfox-swagger2")
  implementation "io.springfox:springfox-bean-validators"
  implementation "org.mariadb.jdbc:mariadb-java-client"
  liquibaseRuntime "org.mariadb.jdbc:mariadb-java-client"
  implementation "org.mapstruct:mapstruct:${mapstructVersion}"
  annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
  annotationProcessor "org.hibernate:hibernate-jpamodelgen:${hibernateVersion}"
  annotationProcessor "org.glassfish.jaxb:jaxb-runtime:${jaxbRuntimeVersion}"
  annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"
  testImplementation "io.cucumber:cucumber-junit"
  testImplementation "io.cucumber:cucumber-java"
  testImplementation "io.cucumber:cucumber-spring"
  testImplementation "org.springframework.boot:spring-boot-starter-test"
  testImplementation "org.springframework.security:spring-security-test"
  testImplementation "org.springframework.boot:spring-boot-test"
  testImplementation "com.tngtech.archunit:archunit-junit5-api:${archunitJunit5Version}"
  testRuntimeOnly "com.tngtech.archunit:archunit-junit5-engine:${archunitJunit5Version}"
  testImplementation "com.h2database:h2"
  liquibaseRuntime "com.h2database:h2"
  testImplementation "org.testcontainers:kafka"

  testImplementation "org.testcontainers:testcontainers"
  developmentOnly "org.springframework.boot:spring-boot-devtools:${springBootVersion}"
  //jhipster-needle-gradle-dependency - JHipster will add additional dependencies here

  implementation "org.projectlombok:lombok:${lombokVersion}"
  annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

  testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
  testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

  implementation "org.json:json:${jsonVersion}"
  implementation "com.google.code.gson:gson:${gsonVersion}"
  implementation "org.jsoup:jsoup:${jsoupVersion}"
  implementation "io.vavr:vavr:${vavrVersion}"
  implementation "com.jcraft:jsch:${jschVersion}"
  runtimeClasspath "org.webjars:bootstrap:${bootstrapVersion}" // chỉ add vào để cho intelliJ gợi ý class khi code thôi
  implementation "com.squareup:javapoet:${javapoestVersion}"
  implementation "io.github.classgraph:classgraph:${classGraphVersion}"
//  implementation "org.springframework.experimental:spring-native:0.10.2"

//  implementation "com.speedment.jpastreamer:jpastreamer-core:1.0.2"
//  annotationProcessor "com.speedment.jpastreamer:fieldgenerator-standard:1.0.2"
}

if (project.hasProperty("gae"))
{
  task createPom {
    def basePath = 'build/resources/main/META-INF/maven'
    doLast {
      pom {
        withXml(dependencyManagement.pomConfigurer)
      }.writeTo("${basePath}/${project.group}/${project.name}/pom.xml")
    }
  }
  bootJar.dependsOn = [createPom]
}

task cleanResources(type: Delete) {
  delete "build/resources"
}

wrapper {
  gradleVersion = "7.0.2"
}


if (project.hasProperty("nodeInstall")) {
  // Workaround node grade plugin not working on apple silicon https://github.com/node-gradle/gradle-node-plugin/issues/154
  OperatingSystem os = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.getCurrentOperatingSystem()
  Architecture arch = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.getCurrentArchitecture()
  Boolean downloadNode = !os.isMacOsX() || arch.isAmd64()
  node {
    version = "14.17.1"
    npmVersion = "7.18.1"
    download = downloadNode
  }
}
compileJava{
  options.compilerArgs += [
    '-Amapstruct.unmappedTargetPolicy=IGNORE'
  ]
}
compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo

// create by yuvytung
task generateAdvaneService(type: JavaExec) {
  group = "Generator"
  description = "Run the main class with JavaExecTask"
  classpath = sourceSets.main.runtimeClasspath
  main = "com.regitiny.tools.generator.GeneratorMain"
}

// graalVM
bootBuildImage {
  builder = "paketobuildpacks/builder:tiny"
  environment = [
    "BP_NATIVE_IMAGE" : "true",
    "BP_NATIVE_IMAGE_BUILD_ARGUMENTS":"-H:+ReportExceptionStackTraces " +
      " --no-fallback " +
      " --allow-incomplete-classpath " +
      " " +
      " --no-fallback " +
      " --allow-incomplete-classpath " +
      " --initialize-at-build-time=org.springframework.util.unit.DataSize," +
      "ch.qos.logback.core.spi.AppenderAttachableImpl," +
      "ch.qos.logback.classic.Logger," +
      "org.slf4j.impl.StaticLoggerBinder," +
      "ch.qos.logback.core.util.Loader," +
      "ch.qos.logback.core.CoreConstants," +
      "org.slf4j.LoggerFactory," +
      "org.slf4j.MDC," +
      "ch.qos.logback.core.util.StatusPrinter," +
      "ch.qos.logback.core.status.InfoStatus," +
      "ch.qos.logback.classic.Level," +
      "org.springframework.beans.BeanUtils," +
      "org.springframework.util.ConcurrentReferenceHashMap," +
      "org.springframework.core.LocalVariableTableParameterNameDiscoverer," +

      "org.apache.commons.logging.LogAdapter\$Slf4jLocationAwareLog," +
      "org.springframework.core.KotlinDetector," +
      "org.springframework.util.ClassUtils," +
      "org.apache.commons.logging.LogAdapter\$1," +
      "org.apache.commons.logging.LogAdapter," +

      "ch.qos.logback.core.status.StatusBase" +
      " " +
      " --initialize-at-run-time=io.netty.util.internal.logging.Log4JLogger," +
      "org.springframework.beans.BeanUtils\$KotlinDelegate" +
      " " +

      "   " +
//      " --allow-incomplete-classpath "+
//
//      " _JAVA_OPTIONS=-Xmx512m -Xms256m " +
//      " spring.profiles.active=prod,api-docs " +
//      "      - management.metrics.export.prometheus.enabled=true " +
//      "      - eureka.client.service.url.defaultzone=http://admin:\${jhipster.registry.password}@catiny-dev-jhipster-registry:8761/eureka " +
//      "      - spring.cloud.config.uri=http://admin:\${jhipster.registry.password}@catiny-dev-jhipster-registry:8761/config " +
//      "      - spring.datasource.url=jdbc:mariadb://catiny-dev-mariadb:3306/catiny?useLegacyDatetimeCode=false&serverTimezone=UTC " +
//      "      - spring.liquibase.url=jdbc:mariadb://catiny-dev-mariadb:3306/catiny?useLegacyDatetimeCode=false&serverTimezone=UTC " +
//      "      - jhipster.cache.redis.server=redis://catiny-dev-redis:6379 " +
//      "      - jhipster.cache.redis.cluster=false " +
//      "      # - JHIPSTER.CACHE.REDIS.SERVER=redis://catiny-redis:6379 " +
//      "      # - JHIPSTER.CACHE.REDIS.CLUSTER=true " +
//      "      - jhipster.sleep=20 # gives time for mariadb server to start " +
//      "      - spring.elasticsearch.rest.uris=http://catiny-dev-elasticsearch:9200 " +
//      "      - kafka.bootstrapservers=catiny-dev-kafka:19092"
      ""
  ]
}

//nativeBuild {
//  classpath "$buildDir/resources", "$buildDir/classes/java/main"
//}